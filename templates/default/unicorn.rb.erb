# Generated by Chef for <%= @user %>@<%= node['fqdn'] %>.
# Local modifications will be overwritten.
#

rails_env = '<%= @environment %>'

worker_processes <%= @worker_processes %>

# Load rails+github.git into the master before forking workers
# for super-fast worker spawn times
preload_app true

# Restart any workers that haven't responded in 120 seconds
timeout 120

# Listen on a Unix data socket
listen '<%= @listen %>', :backlog => 2048

stderr_path "<%= @app_path %>/current/log/unicorn.stderr.log"
stdout_path "<%= @app_path %>/current/log/unicorn.stdout.log"


##
# REE

# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
#if GC.respond_to?(:copy_on_write_friendly=)
#  GC.copy_on_write_friendly = true
#end


before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = File.join(Rails.root, '/tmp/pids/unicorn.pid.oldbin')
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end

  defined?(Sequel::Model) and
    Sequel::Model.db.disconnect

end


after_fork do |server, worker|
  defined?(Sequel::Model) and
    Sequel::Model.db.connect(SequelRails.configuration.environment_for(Rails.env))

end

before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= @app_path %>/current/Gemfile"
end
